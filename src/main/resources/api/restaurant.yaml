openapi: 3.0.3
info:
  title: Swagger Restaurants - Restaurant
  version: 1.0.0
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: https://localhost:8080
    description: Local server

tags:
  - name: Restaurant
    description: All of restaurants
paths:
  /restaurant:
    get:
      operationId: searchRestaurant
      parameters:
        - name: city
          in: query
          required: false
          schema:
            type: string
        - name: state
          in: query
          required: false
          schema:
            type: string
        - name: type
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginateRestaurant'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: createRestaurant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateRestaurant"
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Restaurant"
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /restaurant/{id}:
    get:
      operationId: findRestaurantById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Restaurant"
        '404':
          description: Not Found Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      operationId: updateRestaurant
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateRestaurant"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Restaurant"
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: Not Found Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: deleteRestaurant
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Success
        '404':
          description: Not Found Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    Restaurant:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Restaurant Id.
          example: 01ec2160-587e-4551-bc4a-3b65484058f8
        name:
          type: string
          description: Name of restaurant.
          example: Tia Nicole
        numberOfTables:
          type: integer
          description: Number of tables in restaurant
          minimum: 1
          example: 10
        address:
          type: string
          description: Address of restaurant.
          example: Rua das Clarisas, 100
        city:
          type: string
          description: City of restaurant.
          example: Belo Horizonte
        state:
          type: string
          description: State of restaurant.
          example: MG
        type:
          type: string
          format: enum
          enum:
            - BRAZILIAN
            - JAPAN
            - ARABIC
            - ITALIAN
            - MEXICAN
            - CHINESE
            - VEGAN
          description: Type of restaurant
          example: BRAZILIAN
        openedAt:
          type: string
          description: Started at restaurant.
          example: "10:00:00"
        closedAt:
          type: string
          description: Closed at restaurant.
          example: "10:00:00"
    PaginateRestaurant:
      type: array
      description: List of restaurant.
      items:
        $ref: "#/components/schemas/Restaurant"
    CreateRestaurant:
      required:
        - name
        - numberOfTables
        - address
        - city
        - state
        - type
        - openedAt
        - closedAt
      type: object
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 100
          description: Name of restaurant.
          example: Tia Nicole
        numberOfTables:
          type: integer
          description: Number of tables in restaurant
          minimum: 1
          example: 10
        address:
          type: string
          minLength: 5
          maxLength: 200
          description: Address of restaurant.
          example: Rua das Clarisas, 100
        city:
          type: string
          minLength: 2
          maxLength: 100
          description: City of restaurant.
          example: Belo Horizonte
        state:
          type: string
          minLength: 2
          maxLength: 2
          description: State of restaurant.
          example: MG
        type:
          type: string
          format: enum
          enum:
            - BRAZILIAN
            - JAPAN
            - ARABIC
            - ITALIAN
            - MEXICAN
            - CHINESE
            - VEGAN
          description: Type of restaurant
          example: BRAZILIAN
        openedAt:
          type: string
          description: Opened at restaurant.
          example: "10:00:00"
        closedAt:
          type: string
          description: Closed at restaurant.
          example: "10:00:00"
    UpdateRestaurant:
      type: object
      required:
        - name
        - numberOfTables
        - address
        - city
        - state
        - type
        - openedAt
        - closedAt
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 100
          description: Name of restaurant.
          example: Tia Nicole
        numberOfTables:
          type: integer
          description: Number of tables in restaurant
          minimum: 1
          example: 10
        address:
          type: string
          minLength: 5
          maxLength: 200
          description: Address of restaurant.
          example: Rua das Clarisas, 100
        city:
          type: string
          minLength: 2
          maxLength: 100
          description: City of restaurant.
          example: Belo Horizonte
        state:
          type: string
          minLength: 2
          maxLength: 2
          description: State of restaurant.
          example: MG
        type:
          type: string
          format: enum
          enum:
            - BRAZILIAN
            - JAPAN
            - ARABIC
            - ITALIAN
            - MEXICAN
            - CHINESE
            - VEGAN
          description: Type of restaurant
          example: BRAZILIAN
        openedAt:
          type: string
          description: Opened at restaurant.
          example: "10:00:00"
        closedAt:
          type: string
          description: Closed at restaurant.
          example: "10:00:00"
    Error:
      type: object
      properties:
        code:
          type: string
          description: Code of error.
          example: NOT_FOUND
        message:
          type: string
          description: Message of error.
          example: Not Found Error.
        details:
          type: array
          description: Details of Errors.
          items:
            type: string