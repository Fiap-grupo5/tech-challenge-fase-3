/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.57).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.g5.reservation.api;

import com.g5.reservation.model.CreateReservationDTO;
import com.g5.reservation.model.PaginateReservationDTO;
import com.g5.reservation.model.ReservationDTO;
import com.g5.reservation.model.UpdateReservationDTO;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@jakarta.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2024-12-14T12:13:04.488019175-03:00[America/Sao_Paulo]")
@Validated
public interface ReservationApi {

    Logger log = LoggerFactory.getLogger(ReservationApi.class);

    default Optional<ObjectMapper> getObjectMapper(){
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest(){
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @Operation(summary = "", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Success", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ReservationDTO.class))),
        
        @ApiResponse(responseCode = "400", description = "Error"),
        
        @ApiResponse(responseCode = "422", description = "Validation Error") })
    @RequestMapping(value = "/reservation",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ReservationDTO> createReservation(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody CreateReservationDTO body
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"numberOfTables\" : 1,\n  \"customerContact\" : \"customerContact\",\n  \"id\" : \"01ec2160-587e-4551-bc4a-3b65484058f8\",\n  \"restaurantId\" : \"01ec2160-587e-4551-bc4a-3b65484058f8\",\n  \"reservationDate\" : \"2024-01-01T00:00:00.000+00:00\",\n  \"customerName\" : \"Gabriel Silva\",\n  \"status\" : \"PENDING\"\n}", ReservationDTO.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ReservationApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Success"),
        
        @ApiResponse(responseCode = "400", description = "Error"),
        
        @ApiResponse(responseCode = "404", description = "Not Found Error") })
    @RequestMapping(value = "/reservation/{id}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteReservation(@Parameter(in = ParameterIn.PATH, description = "Reservation ID", required=true, schema=@Schema()) @PathVariable("id") String id
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ReservationApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Success", content = @Content(mediaType = "application/json", schema = @Schema(implementation = PaginateReservationDTO.class))) })
    @RequestMapping(value = "/reservation",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<PaginateReservationDTO> findReservation() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("[ {\n  \"numberOfTables\" : 1,\n  \"customerContact\" : \"customerContact\",\n  \"id\" : \"01ec2160-587e-4551-bc4a-3b65484058f8\",\n  \"restaurantId\" : \"01ec2160-587e-4551-bc4a-3b65484058f8\",\n  \"reservationDate\" : \"2024-01-01T00:00:00.000+00:00\",\n  \"customerName\" : \"Gabriel Silva\",\n  \"status\" : \"PENDING\"\n}, {\n  \"numberOfTables\" : 1,\n  \"customerContact\" : \"customerContact\",\n  \"id\" : \"01ec2160-587e-4551-bc4a-3b65484058f8\",\n  \"restaurantId\" : \"01ec2160-587e-4551-bc4a-3b65484058f8\",\n  \"reservationDate\" : \"2024-01-01T00:00:00.000+00:00\",\n  \"customerName\" : \"Gabriel Silva\",\n  \"status\" : \"PENDING\"\n} ]", PaginateReservationDTO.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ReservationApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Success", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ReservationDTO.class))),
        
        @ApiResponse(responseCode = "400", description = "Error"),
        
        @ApiResponse(responseCode = "404", description = "Not Found Error") })
    @RequestMapping(value = "/reservation/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ReservationDTO> findReservationById(@Parameter(in = ParameterIn.PATH, description = "Reservation Id", required=true, schema=@Schema()) @PathVariable("id") String id
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"numberOfTables\" : 1,\n  \"customerContact\" : \"customerContact\",\n  \"id\" : \"01ec2160-587e-4551-bc4a-3b65484058f8\",\n  \"restaurantId\" : \"01ec2160-587e-4551-bc4a-3b65484058f8\",\n  \"reservationDate\" : \"2024-01-01T00:00:00.000+00:00\",\n  \"customerName\" : \"Gabriel Silva\",\n  \"status\" : \"PENDING\"\n}", ReservationDTO.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ReservationApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Success", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ReservationDTO.class))),
        
        @ApiResponse(responseCode = "400", description = "Error"),
        
        @ApiResponse(responseCode = "404", description = "Not Found Error"),
        
        @ApiResponse(responseCode = "422", description = "Validation Error") })
    @RequestMapping(value = "/reservation/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    default ResponseEntity<ReservationDTO> updateReservation(@Parameter(in = ParameterIn.PATH, description = "Reservation ID", required=true, schema=@Schema()) @PathVariable("id") String id
, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody UpdateReservationDTO body
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"numberOfTables\" : 1,\n  \"customerContact\" : \"customerContact\",\n  \"id\" : \"01ec2160-587e-4551-bc4a-3b65484058f8\",\n  \"restaurantId\" : \"01ec2160-587e-4551-bc4a-3b65484058f8\",\n  \"reservationDate\" : \"2024-01-01T00:00:00.000+00:00\",\n  \"customerName\" : \"Gabriel Silva\",\n  \"status\" : \"PENDING\"\n}", ReservationDTO.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ReservationApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}

