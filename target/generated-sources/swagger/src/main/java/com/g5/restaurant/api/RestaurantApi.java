/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.57).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.g5.restaurant.api;

import com.g5.restaurant.model.CreateRestaurantDTO;
import com.g5.restaurant.model.ErrorDTO;
import com.g5.restaurant.model.PaginateRestaurantDTO;
import com.g5.restaurant.model.RestaurantDTO;
import com.g5.restaurant.model.UpdateRestaurantDTO;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@jakarta.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2024-12-13T00:34:19.998662689-03:00[America/Sao_Paulo]")
@Validated
public interface RestaurantApi {

    Logger log = LoggerFactory.getLogger(RestaurantApi.class);

    default Optional<ObjectMapper> getObjectMapper(){
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest(){
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @Operation(summary = "", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Success", content = @Content(mediaType = "application/json", schema = @Schema(implementation = RestaurantDTO.class))),
        
        @ApiResponse(responseCode = "400", description = "Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class))) })
    @RequestMapping(value = "/restaurant",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<RestaurantDTO> createRestaurant(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody CreateRestaurantDTO body
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"numberOfTables\" : 10,\n  \"address\" : \"Rua das Clarisas, 100\",\n  \"city\" : \"Belo Horizonte\",\n  \"name\" : \"Tia Nicole\",\n  \"id\" : \"01ec2160-587e-4551-bc4a-3b65484058f8\",\n  \"state\" : \"MG\",\n  \"type\" : \"BRAZILIAN\",\n  \"closedAt\" : \"10:00:00\",\n  \"openedAt\" : \"10:00:00\"\n}", RestaurantDTO.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default RestaurantApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Success"),
        
        @ApiResponse(responseCode = "404", description = "Not Found Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class))) })
    @RequestMapping(value = "/restaurant/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteRestaurant(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("id") String id
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default RestaurantApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Success", content = @Content(mediaType = "application/json", schema = @Schema(implementation = RestaurantDTO.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class))) })
    @RequestMapping(value = "/restaurant/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<RestaurantDTO> findRestaurantById(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("id") String id
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"numberOfTables\" : 10,\n  \"address\" : \"Rua das Clarisas, 100\",\n  \"city\" : \"Belo Horizonte\",\n  \"name\" : \"Tia Nicole\",\n  \"id\" : \"01ec2160-587e-4551-bc4a-3b65484058f8\",\n  \"state\" : \"MG\",\n  \"type\" : \"BRAZILIAN\",\n  \"closedAt\" : \"10:00:00\",\n  \"openedAt\" : \"10:00:00\"\n}", RestaurantDTO.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default RestaurantApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Success", content = @Content(mediaType = "application/json", schema = @Schema(implementation = PaginateRestaurantDTO.class))),
        
        @ApiResponse(responseCode = "400", description = "Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class))) })
    @RequestMapping(value = "/restaurant",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<PaginateRestaurantDTO> searchRestaurant(@Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema()) @Valid @RequestParam(value = "city", required = false) String city
, @Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema()) @Valid @RequestParam(value = "state", required = false) String state
, @Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema()) @Valid @RequestParam(value = "type", required = false) String type
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("[ {\n  \"numberOfTables\" : 10,\n  \"address\" : \"Rua das Clarisas, 100\",\n  \"city\" : \"Belo Horizonte\",\n  \"name\" : \"Tia Nicole\",\n  \"id\" : \"01ec2160-587e-4551-bc4a-3b65484058f8\",\n  \"state\" : \"MG\",\n  \"type\" : \"BRAZILIAN\",\n  \"closedAt\" : \"10:00:00\",\n  \"openedAt\" : \"10:00:00\"\n}, {\n  \"numberOfTables\" : 10,\n  \"address\" : \"Rua das Clarisas, 100\",\n  \"city\" : \"Belo Horizonte\",\n  \"name\" : \"Tia Nicole\",\n  \"id\" : \"01ec2160-587e-4551-bc4a-3b65484058f8\",\n  \"state\" : \"MG\",\n  \"type\" : \"BRAZILIAN\",\n  \"closedAt\" : \"10:00:00\",\n  \"openedAt\" : \"10:00:00\"\n} ]", PaginateRestaurantDTO.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default RestaurantApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Success", content = @Content(mediaType = "application/json", schema = @Schema(implementation = RestaurantDTO.class))),
        
        @ApiResponse(responseCode = "400", description = "Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class))) })
    @RequestMapping(value = "/restaurant/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    default ResponseEntity<RestaurantDTO> updateRestaurant(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("id") String id
, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody UpdateRestaurantDTO body
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"numberOfTables\" : 10,\n  \"address\" : \"Rua das Clarisas, 100\",\n  \"city\" : \"Belo Horizonte\",\n  \"name\" : \"Tia Nicole\",\n  \"id\" : \"01ec2160-587e-4551-bc4a-3b65484058f8\",\n  \"state\" : \"MG\",\n  \"type\" : \"BRAZILIAN\",\n  \"closedAt\" : \"10:00:00\",\n  \"openedAt\" : \"10:00:00\"\n}", RestaurantDTO.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default RestaurantApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}

